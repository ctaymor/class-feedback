It took me a little bit to figure out exactly where the SQL code was 
being executed, and how changes to the database were made. Once I 
figured that out, my next challenge was trying to make it work to
keep the data when making the column unique. I got fairly stuck 
on how to select only one unique entry. I wrote the following code
in onUpgrade():
    db.execSQL("ALTER TABLE " + TABLE_COMMENTS + " RENAME TO old_comments");
    onCreate(db);
    db.execSQL("INSERT INTO " + TABLE_COMMENTS + " SELECT DISTINCT FROM old_comments");
I tried looking at using SELECT for distinct columns but I couldn't quite figure out
how to make it work, and I decided that since it was extra credit and I'm running late, 
as much as I wanted to figure it out, it needed to wait until I got the rest of
the lab done. Then if I have time, I could go back and figure it out.
My first thought was to sort them by date (ie use the most recent comment) but then I
realized that we don't have a date column, so that wouldn't work. 

I then used code which destroyed the old data to make the upgrade, which was frustrating,
but I knew that I had to move on the the next bit of the body of the lab.

I then had the problem of how to test my code. After 3 hours, the emulator was still in progress
loading, so I couldn't look at the data directly. To test that the code had been emptied
by the database upgrade, I wrote a method in CommentsDataSource which got the count of
comments for a specific recipient, and displayed the result (just for testing purposes) in
the EditTextView. I then clicked on people who I had previously added comments to, and checked
that their comment count was 0. I added a comment to the user, saved it, and checked that the
count became 1. I tried adding a second comment, saved it, and the count was still one, so
only unique comments are being added.

Problem: Save button did not save the data.

That is, it would say it saved the comment, but when I pressed the comment button
for that user, the old comment remained. I tested
it via logging, and discovered that it actually was changing the content of the comment, but
somehow, the change didn't stick, that is, when I opened the comment again, the content
of the comment was the old content not the new content. This indicated to me that the change
was not properly being written to the database. I recalled that in Rails, when you make a
change to your database (the database I worked with used SQL), you had to save the change
after making it, in order for it to be written to the database. I started wondering if that
was the case here. I wrote a method in commentsDataSource, updateComment(Comment comment) which
updated the database with the new information, with some help from this tutorial:
http://hmkcode.com/android-simple-sqlite-database-tutorial/
I then tested it again:
1. clicked on comment for Caroline
2. wrote a new comment
3. clicked save
4. clicked on comment for Caroline
5. the new comment is displayed.
My logging also displays that the new comment has been saved all the way to the database, as it
is now the content of the comment even after closing and reopening the CommentActivity.